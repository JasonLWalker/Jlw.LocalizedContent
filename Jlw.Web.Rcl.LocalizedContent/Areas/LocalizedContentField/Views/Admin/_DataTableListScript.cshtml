@{
    bool isAdmin = true;
    bool canView = isAdmin || true;
    bool canAdd = isAdmin || true;
    bool canEdit = isAdmin || true;
    bool canDelete = isAdmin || true;
    string apiUrl = (string.IsNullOrWhiteSpace(ViewData["apiOverrideUrl"]?.ToString())) ? Url.Action("Index", "Api", new { Area = "LocalizedContentField", groupKey = (string)null, parentKey = (string)null }) + "/" : ViewData["apiOverrideUrl"]?.ToString();
    string adminUrl = (string.IsNullOrWhiteSpace(ViewData["adminOverrideUrl"]?.ToString())) ? Url.Action("Index", new { Area = "LocalizedContentField", groupKey = (string)null, parentKey = (string)null }) : ViewData["adminOverrideUrl"]?.ToString();
    string adminTextUrl = (string.IsNullOrWhiteSpace(ViewData["adminTextOverrideUrl"]?.ToString())) ? Url.Action("Index", new { Area = "LocalizedContentText", groupKey = (string)null, parentKey = (string)null }) : ViewData["adminTextOverrideUrl"]?.ToString();
    string wizardUrl = (string.IsNullOrWhiteSpace(ViewData["wizardOverrideUrl"]?.ToString())) ? Url.Action("Wizard", new { Area = "LocalizedContentField", groupKey = (string)null, parentKey = (string)null }) : ViewData["wizardOverrideUrl"]?.ToString();
    string emailUrl = (string.IsNullOrWhiteSpace(ViewData["emailOverrideUrl"]?.ToString())) ? Url.Action("Email", new { Area = "LocalizedContentField", groupKey = (string)null, parentKey = (string)null }) : ViewData["wizardOverrideUrl"]?.ToString();
}
<link href="~/LocalizedContent/css/prism-vs.min.css" rel="stylesheet" type="text/css" />
<script src="~/LocalizedContent/js/prism.min.js"></script>
<style>
    pre.highlighting *, code.highlighting-content *, textarea.editing * {
        font-family: monospace !important;
    }

    textarea.editing, pre.highlighting {
        /*border: none !important;*/
        margin: 0;
        padding: .5rem .8rem !important;
        width: inherit;
        height: inherit;
    }
    textarea.editing, pre.highlighting, pre.highlighting * {
        /* Also add text styles to highlighing tokens */
        font-size: 13pt !important;
        font-family: monospace !important;
        line-height: 18pt !important;
    }


    textarea.editing, pre.highlighting {
        /* In the same place */ 
        position: absolute !important;
        top: 0;
        left: 0;
    }


    /* Move the textarea in front of the result */

    textarea.editing {
      z-index: 1;
    }
    pre.highlighting {
      z-index: 0;
    }

    /* Make textarea almost completely transparent */
    textarea.editing {
      color: transparent !important;
      background: transparent !important;
      caret-color: black; /* Or choose your favourite color */
    }

    /* Can be scrolled */
    textarea.editing, pre.highlighting {
      overflow: auto;
      white-space: nowrap; /* Allows textarea to scroll horizontally */
    }

    /* No resize on textarea */
    textarea.editing {
        resize: none;
        -moz-tab-size: 3;
        -o-tab-size: 3;
        tab-size: 3;

    }

    /* Syntax Highlighting from prism.js starts below, partly modified: */
    code[class*="language-"],
    pre[class*="language-"] {
      text-align: left;
      white-space: pre;
      word-spacing: normal;
      word-break: normal;
      word-wrap: normal;
      -moz-tab-size: 3;
      -o-tab-size: 3;
      tab-size: 3;

      -webkit-hyphens: none;
      -moz-hyphens: none;
      -ms-hyphens: none;
      hyphens: none;
    }

    /* Code blocks */
    pre[class*="language-"] {
      overflow: auto;
        border-left: initial;
    }

    code[class*="language"] {
        margin: 0 !important;

    }
/* End of prism.js syntax highlighting*/
</style>
<script>

    if (!window.jlwLibLocalizedContentField) {
        window.jlwLibLocalizedContentField = function() {
            $.fn.dataTable.ext.errMode = 'none';
            var t = new libJlwAppBuilder('@apiUrl', '.jlw-dtlist-localizedcontentfield table.jlw-datatable-localizedcontentfield');
            //t.reAmp = new RegExp("&", "g");
            //t.reLt = new RegExp("<", "g");

            // Syntax highlighting code from article at https://css-tricks.com/creating-an-editable-textarea-that-supports-syntax-highlighted-code/
            window.prismSyntaxHighlight = function(text, ctrl) {
                var p = $(ctrl).parent();
                var elem = $('code.highlighting-content', p);
                elem.html(text.replace(new RegExp("&", "g"), "&amp;").replace(new RegExp("<", "g"), "&lt;"));
                Prism.highlightElement(elem[0]);
            }
            window.prismSyncScroll = function(element) {
                /* Scroll result to scroll coords of event - sync with textarea */
                var p = $(element).parent();
                var result_element = $("pre.highlighting",p)[0];
                // Get and set x and y
                result_element.scrollTop = element.scrollTop;
                result_element.scrollLeft = element.scrollLeft;
            }

            window.prismCheckTab = function(element, event) {
                var code = element.value;
                if (event.key == "Tab") {
                    /* Tab key pressed */
                    event.preventDefault(); // stop normal
                    var before_tab = code.slice(0, element.selectionStart); // text before tab
                    var after_tab = code.slice(element.selectionEnd, element.value.length); // text after tab
                    var cursor_pos = element.selectionEnd + 1; // after tab placed, where cursor moves to - 1 for 1 tab char
                    element.value = before_tab + "\t" + after_tab; // add tab char - 1 tab char
                    // move cursor
                    element.selectionStart = cursor_pos;
                    element.selectionEnd = cursor_pos;

                    var p = $(element).parent();
                    var text = element.value;
                    var elem = $('code.highlighting-content', p);
                    elem.html(text.replace(new RegExp("&", "g"), "&amp;").replace(new RegExp("<", "g"), "&lt;"));
                    Prism.highlightElement(elem[0]);
                }
            }

            @if (canEdit)
            {
            <text>
            t.frmEdit = $('#jlwEditFormLocalizedContentField').html();

            t.showDialog = function (oData, frmEdit, sTitle, btns)
            {
                var onClose = function(o) { t.destroyWysiwyg($(o.delegateTarget)); };
                if (!btns) { btns = {}; }
                if (!btns["no"]) { btns['no'] = { label: '<div class="text-left"><i class="fas fa-arrow-left"></i> Close</div>', className: 'btn btn-outline-danger', callback: onClose }; }
                var oFrm = bootbox.dialog({ title: sTitle, message: frmEdit, onEscape: false, size: "large", buttons: btns });
                t.populateFormData(oData, oFrm); $(".modal-lg", oFrm).addClass("modal-xl"); t.setModalOnTop(oFrm);
                oFrm.data('parentLib', t);
                t.initWysiwyg(oFrm);
                return oFrm;
            }

            function onEditLanguage(o) {
                var elem = $(o);
                var data = t.getParentData(o);
                window.location = '@adminTextUrl/' + data['GroupKey'] + '/' + data['FieldKey'];
            }

            function onEditField(oBtn, fnOnShow) {
                t.onEditRecord(oBtn, function (oFrm, oData) {
                    
                    function fnEditTextarea(evt) {
                        window.prismSyntaxHighlight(this.value, this);
                        console.log(evt, );
                        var ctrl = $(this);
                        var p = ctrl.parent().parent();
                        var row = p.parent();
                        if (evt.type == 'blur') {
                            $('.col-lg', row).removeClass('d-none');
                            //ctrl.prop('rows', 3);
                        } else {
                            $('.col-lg', row).addClass('d-none');
                            p.removeClass('d-none');
                            //ctrl.prop('rows', 10);
                        }
                        
                    }
                    
                    $('textarea.editing', oFrm).off()
                        .on("focus", fnEditTextarea)
                        .on("blur", fnEditTextarea)
                        .on("input", function () { window.prismSyntaxHighlight(this.value, this); })
                        .on("scroll", function () { window.prismSyncScroll(this); })
                        .on("keydown", function(evt){window.prismCheckTab(this, evt)});

                    $('textarea.editing', oFrm).each(function() {
                        window.prismSyntaxHighlight(this.value, this);
                    });

                });
            }

            t.addDtRowButton('', 'btn-localize', '', 'btn-outline-secondary', onEditLanguage);
            t.addDtRowButton('', 'btn-edit', 'fas fa-pencil-alt text-warning', 'btn-outline-secondary', onEditField);
        </text>
        }

            t.addDtRowButton('', 'btn-delete', 'fas fa-trash-alt text-danger', 'btn-outline-secondary', t.onDeleteRecord);

            t.fnPostDtAjaxData = function(d) {
                // Add additional parameters here like this:
                // d.SomeParameter = 'SomeValue';
                d.GroupKey = '@(ViewData["groupKey"])';
                //d.FieldKey = '@(ViewData["parentKey"])';
                d.FieldType = '@(ViewData["fieldType"])';
                d.ParentKey = '@(ViewData["parentKey"])';
            }
            t.addDtRenderer(function(data, type, row) {
                // Do not output content for these columns
                row['WrapperHtmlStart'] = '';
                row['WrapperHtmlEnd'] = '';
                return t.dtRenderButtons(data, type, row);
            }, [15]);

            t.addDtRenderer(function (data, type, row) {
                switch (row["FieldType"].toUpperCase()) {
                case 'WIZARD':
                case 'EMAIL':
                    return '<a href="@wizardUrl/' + data + '">' + data + '</a>';
                }
                return data;
            }, [1]);
            t.addDtRenderer(function (data, type, row) {
                switch (row["FieldType"].toUpperCase()) {
                case 'WIZARD':
                    return '<a href="@wizardUrl/' + row['GroupKey'] + '/' + data + '">' + data + '</a>';
                case 'EMAIL':
                    return '<a href="@emailUrl/' + row['GroupKey'] + '/' + data + '">' + data + '</a>';
                case 'FORM':
                    return '<a href="@adminUrl/' + row['GroupKey'] + '/' + data + '">' + data + '</a>';
                }
                return data;
            }, [2]);
            t.addDtRenderer(function(data, type, row) {
                // Do not output content for these columns
                return '';
            }, [9,10]);

            var dt = t.initializeDataTable(t.sDtSelector);

            dt.on('error.dt',
                    function(e, settings, techNote, message) {
                        if (console)
                            console.log('An error has been reported by DataTables: ', message);
                    })
                .on('xhr.dt', function ( e, settings, json, xhr ) {
                    var data = xhr["responseJSON"];
                    t.checkAjaxMessage(data);
                })
                .on('draw.dt', function(e, settings) {
                    //console.log(e, settings);
                    var a = $('.btn-localize');
                    a.each(function(i, elem) {
                        var o = $(elem);
                        var data = t.getParentData(o);
                        o.append($('<span class="fa-layers fa-fw"><span class="fas fa-language"></span><span class="fa-layers-counter"  data-fa-transform="shrink-11 up-10 right-10" style="background:#0062cccc; font-size:2rem; top:-5px; right:-5px;">' + data['LocalizedCount'] + '</span></span>'));

                    });
                });



            t.addDtFooterButton(' Add New Record', 'btn-newrecord', 'fa fa-plus', 'btn-primary', t.onAddRecord);
            t.dtRenderFooterButtons();
            $('.btn-newrecord').off('click').on('click', t.onAddRecord);

        }
    }
</script>
