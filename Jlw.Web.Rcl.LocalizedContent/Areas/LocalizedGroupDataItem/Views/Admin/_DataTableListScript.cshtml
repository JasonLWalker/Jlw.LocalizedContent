@model Jlw.Web.Rcl.LocalizedContent.Areas.LocalizedGroupDataItem.Controllers.AdminController.AdminSettings 
@{ 
    bool isAdmin = Model?.IsAdmin ?? false;
    bool canView = isAdmin || (Model?.CanView ?? false);
    bool canAdd = isAdmin || (Model?.CanAdd ?? false);
    bool canEdit = isAdmin || (Model?.CanEdit ?? false);
    bool canDelete = isAdmin || (Model?.CanDelete ?? false);
    string apiUrl = string.IsNullOrWhiteSpace(Model?.ApiOverrideUrl) ? Url.Action("Index", "Api", new { Area = Model?.Area, groupKey = (string)null, parentKey = (string)null }) + " /" : Model?.ApiOverrideUrl;
} 
<script>

    if (!window.jlwLibLocalizedGroupDataItem) {
        window.jlwLibLocalizedGroupDataItem = function () {
            $.fn.dataTable.ext.errMode = 'none';
            var t = new libJlwAppBuilder('@apiUrl', '.jlw-dtlist-localizedgroupdataitem table.jlw-datatable-localizedgroupdataitem');

            @if (canEdit || canAdd)
            {
                @:t.frmEdit = $('#jlwEditFormLocalizedGroupDataItem').html();
            }

            @if (canEdit)
            {
                <text>
                    function fnOnEditRecord(oBtn, fnOnShow) {
                        function fnShow(o, data) {
                            var oFrm = $(o);
                            @if (!string.IsNullOrWhiteSpace(Model?.GroupKeyOverride))
                            {
                                @:$('input[name=GroupKey]', oFrm).val('@(Model.GroupKeyOverride)');
                            }
                            @if (!string.IsNullOrWhiteSpace(Model?.KeyOverride))
                            {
                                @:$('input[name=Key]', oFrm).val('@(Model.KeyOverride)');
                            }
                            $('select[name=Language]', oFrm).val('@(Model?.LanguageOverride ?? "EN")');
                            @*
                            $('input[name=FieldKey]', oFrm).val(elemData['FieldKey']);
                            $('input[name=ParentKey]', oFrm).val(elemData['ParentKey']);
                            //$('select[name=Language]', oFrm).val(elemData['Language']);
                            *@
                            @if (Model?.ShowLanguage ?? false)
                            {
                                @:$('select[name=Language]', oFrm).parent().addClass('d-none');
                            }
                            

                            if (typeof fnOnShow == 'function')
                                fnOnShow(o, data);
                        }

                        return t.onEditRecord(oBtn, fnShow);
                    }

                    t.addDtRowButton('', 'btn-edit', 'fas fa-pencil-alt text-warning', 'btn-outline-secondary', fnOnEditRecord);
                </text>
            }
            @if (canAdd)
            {
                <text>
                    function fnOnAddRecord(fnOnShow) {
                        function fnShow(o, data) {
                            var oFrm = $(o);
                            //console.log(oFrm);
                            @if (!string.IsNullOrWhiteSpace(Model?.GroupKeyOverride))
                            {
                                @:$('input[name=GroupKey]', oFrm).val('@(Model.GroupKeyOverride)');
                            }
                            @if (!string.IsNullOrWhiteSpace(Model?.KeyOverride))
                            {
                                @:$('input[name=Key]', oFrm).val('@(Model.KeyOverride)');
                            }
                            @*
                            $('input[name=GroupKey]', oFrm).val(elemData['GroupKey']);
                            $('input[name=FieldKey]', oFrm).val(elemData['FieldKey']);
                            $('input[name=ParentKey]', oFrm).val(elemData['ParentKey']);
                            *@
                            $('select[name=Language]', oFrm).val('@(Model?.LanguageOverride ?? "EN")');
                            @if (Model?.ShowLanguage ?? false)
                            {
                                @:$('select[name=Language]', oFrm).parent().removeClass('d-none');
                            }

                            if (typeof fnOnShow == 'function')
                                fnOnShow(o, data);
                        }
                        return t.onAddRecord(fnShow);
                    }
                    t.addDtFooterButton(' Add New Record', 'btn-newrecord', 'fa fa-plus', 'btn-primary', fnOnAddRecord);
                </text>
            }
            @if (canDelete)
            {
                @:t.addDtRowButton('', 'btn-delete', 'fas fa-trash-alt text-danger', 'btn-outline-secondary', t.onDeleteRecord);
            }

            t.fnPostDtAjaxData = function(d) {
                // Add additional parameters here like this:
                // d.SomeParameter = 'SomeValue';
            }
            t.addDtRenderer(t.dtRenderButtons, [8]);
            var dt = t.initializeDataTable(t.sDtSelector);

            dt.on('error.dt',
                    function(e, settings, techNote, message) {
                        if (console)
                            console.log('An error has been reported by DataTables: ', message);
                    })
                .on('xhr.dt', function ( e, settings, json, xhr ) {
                    var data = xhr["responseJSON"];
                    t.checkAjaxMessage(data);
                } );



            t.dtRenderFooterButtons();
            @if (canAdd)
            {
                @:$('.btn-newrecord').off('click').on('click', fnOnAddRecord);
            }
        }
    }
</script> 
