@{
    bool isAdmin = true;
    bool canView = isAdmin || true;
    bool canAdd = isAdmin || true;
    bool canEdit = isAdmin || true;
    bool canDelete = isAdmin || true;
    string apiUrl = (string.IsNullOrWhiteSpace(ViewData["apiOverrideUrl"]?.ToString())) ? Url.Action("Index", "Api", new { Area = "LocalizedContentText", groupKey = (string)null, parentKey = (string)null }) + "/" : ViewData["apiOverrideUrl"]?.ToString();
}
<link href="~/LocalizedContent/css/prism-vs.min.css" rel="stylesheet" type="text/css" />
<script src="~/LocalizedContent/js/prism.min.js"></script>
<script src="~/LocalizedContent/tinymce/tinymce.min.js"></script>
<style>
    pre.highlighting *, code.highlighting-content *, textarea.editing * {
        font-family: monospace !important;
    }

    textarea.editing, pre.highlighting {
        /*border: none !important;*/
        margin: 0;
        padding: .5rem .8rem !important;
        width: inherit;
        height: inherit;
    }

        textarea.editing, pre.highlighting, pre.highlighting * {
            /* Also add text styles to highlighing tokens */
            font-size: 13pt !important;
            font-family: monospace !important;
            line-height: 18pt !important;
        }


    textarea.editing, pre.highlighting {
        /* In the same place */
        position: absolute !important;
        top: 0;
        left: 0;
    }


    /* Move the textarea in front of the result */

    textarea.editing {
        z-index: 1;
    }

    pre.highlighting {
        z-index: 0;
    }

    /* Make textarea almost completely transparent */
    textarea.editing {
        color: transparent !important;
        background: transparent !important;
        caret-color: black; /* Or choose your favourite color */
    }

    /* Can be scrolled */
    textarea.editing, pre.highlighting {
        overflow: auto;
        white-space: nowrap; /* Allows textarea to scroll horizontally */
    }

    /* No resize on textarea */
    textarea.editing {
        resize: none;
        -moz-tab-size: 3;
        -o-tab-size: 3;
        tab-size: 3;
    }

    /* Syntax Highlighting from prism.js starts below, partly modified: */
    code[class*="language-"],
    pre[class*="language-"] {
        text-align: left;
        white-space: pre;
        word-spacing: normal;
        word-break: normal;
        word-wrap: normal;
        -moz-tab-size: 3;
        -o-tab-size: 3;
        tab-size: 3;
        -webkit-hyphens: none;
        -moz-hyphens: none;
        -ms-hyphens: none;
        hyphens: none;
    }

    /* Code blocks */
    pre[class*="language-"] {
        overflow: auto;
        border-left: initial;
    }

    code[class*="language"] {
        margin: 0 !important;
    }
    /* End of prism.js syntax highlighting*/
</style>
<script>

    if (!window.jlwLibLocalizedContentText) {
        window.jlwLibLocalizedContentText = function() {
            $.fn.dataTable.ext.errMode = 'none';
            var t = new libJlwAppBuilder('@apiUrl', '.jlw-dtlist-localizedcontenttext table.jlw-datatable-localizedcontenttext');

        @if (canEdit)
        {
            <text>
                t.frmEdit = $('#jlwEditFormLocalizedContentText').html();
            </text>
        }

        @if (canEdit)
        {
            <text>
                function fnOnAddRecord(fnOnShow) {
                    function fnShow(o, data) {
                        var oFrm = $(o);
                        console.log(oFrm);
                        $('input[name=GroupKey]', oFrm).val('@(ViewData["groupKey"])');
                        $('input[name=FieldKey]', oFrm).val('@(ViewData["fieldKey"])');
                        $('input[name=Language]', oFrm).val('@(ViewData["language"])');

                        if (typeof fnOnShow == 'function')
                            fnOnShow(o, data);
                    }

                    return t.onAddRecord(fnShow);
                }

                function fnOnEditRecord(oBtn, fnOnShow) {
                    function fnShow(o, data) {
                        var oFrm = $(o);
                        $('input[name=Language]', oFrm).attr('disabled', true);

                        if (typeof fnOnShow == 'function')
                            fnOnShow(o, data);
                    }

                    return t.onEditRecord(oBtn, fnShow);
                }


                t.addDtRowButton('', 'btn-edit', 'fa fa-fw fa-pencil-alt text-warning', 'btn-outline-secondary mx-1', fnOnEditRecord);

                t.optionsWysiwyg = {
                    @Html.Raw(!string.IsNullOrWhiteSpace(ViewData["tinyMceAdditionalOptions"]?.ToString()) ? ViewData["tinyMceAdditionalOptions"] + "," : "")useTinyMce: true,
                    plugins: 'code @Html.Raw(!string.IsNullOrWhiteSpace(ViewData["tinyMceAdditionalPlugins"]?.ToString()) ? ViewData["tinyMceAdditionalPlugins"] : "")',
                    toolbar: 'undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | outdent indent | code @Html.Raw(!string.IsNullOrWhiteSpace(ViewData["tinyMceAdditionalToolbar"]?.ToString()) ? ViewData["tinyMceAdditionalToolbar"] : "")',
                    menu: {
                        file: { title: 'File', items: 'newdocument restoredraft | preview | print ' },
                        edit: { title: 'Edit', items: 'undo redo | cut copy paste | selectall | searchreplace' },
                        view: { title: 'View', items: 'code | visualaid visualchars visualblocks | spellchecker | preview fullscreen' },
                        insert: { title: 'Insert', items: 'image link media template codesample inserttable | charmap emoticons hr | pagebreak nonbreaking anchor toc | insertdatetime' },
                        format: { title: 'Format', items: 'bold italic underline strikethrough superscript subscript codeformat | formats blockformats fontformats fontsizes align lineheight | forecolor backcolor | removeformat' },
                        tools: { title: 'Tools', items: 'spellchecker spellcheckerlanguage | code wordcount' },
                        table: { title: 'Table', items: 'inserttable | cell row column | tableprops deletetable' },
                        @Html.Raw(!string.IsNullOrWhiteSpace(ViewData["tinyMceAdditionalMenu"]?.ToString()) ? ViewData["tinyMceAdditionalMenu"] + ", " : "")help: { title: 'Help', items: 'help' }
                    }
                };

                $(document).on('focusin', function(e) {
                    if ($(e.target).closest(".tox-tinymce, .tox-tinymce-aux, .moxman-window, .tam-assetmanager-root").length) {
                        e.stopImmediatePropagation();
                    }
                });
            </text>
        }

            t.addDtRowButton('', 'btn-delete', 'fa fa-fw fa-trash-alt text-danger', 'btn-outline-secondary mx-1', t.onDeleteRecord);

            t.fnPostDtAjaxData = function(d) {
                d.GroupKey = '@(ViewData["groupKey"])';
                d.FieldKey = '@(ViewData["fieldKey"])';
                d.Language = '@(ViewData["language"])';
            }
            t.addDtRenderer(t.dtRenderButtons, [7]);
            var dt = t.initializeDataTable(t.sDtSelector);

            dt.on('error.dt',
                    function(e, settings, techNote, message) {
                        if (console)
                            console.log('An error has been reported by DataTables: ', message);
                    })
                .on('xhr.dt', function ( e, settings, json, xhr ) {
                    var data = xhr["responseJSON"];
                    t.checkAjaxMessage(data);
                } );



            t.addDtFooterButton(' Add New Record', 'btn-newrecord', 'fa fa-plus', 'btn-primary', fnOnAddRecord);
            t.dtRenderFooterButtons();
            $('.btn-newrecord').off('click').on('click', fnOnAddRecord);

        }
    }
</script>
