<style>
    .jlw-dad-placeholder {
        background-color: #eee;
        outline: 2px dashed #aaa;
    }

    .jlw-dad-dragging {
        display: none;
    }

    .jlw-dad-drop-allowed {
        cursor:pointer;
        cursor:grabbing;
    }

    .jlw-dad-drop-not-allowed {
        cursor:not-allowed;
    }


</style>
<script>
(function($) {
    if ($ && $.fn && !$.fn.jlwDad) {
        $.fn.jlwDad = function(opts) {
            var commonNamespace = 'jlwDad';
            var t = this;

            function libDad(options, undefined) {
                var libCallbackNamespace = '.' + commonNamespace + 'Lib';
                var callbackNamespace = '.' + commonNamespace;

                var validDropZones = [];

                var settings = $.extend({
                    elemParent: undefined,
                    height: 0,
                    width: 0,
                    effectAllowed: 'all',
                    dropEffect: 'move',
                    showPlaceholder: true,
                    elemPlaceholder: $('<div class="jlw-dad-placeholder" id="jlwDadPlaceholder' + (++$.fn.jlwDad.nLibCount) + '"></div>'),
                    addDropZone: addDropZone,
                    addDragElement: addDragElement,
                    isTargetInDropZone: isTargetInDropZone,
                    validDropZones: validDropZones,
                    getCurrentDragSource: getDragSource,
                    getCurrentDragTarget: getDragTarget,

                    onDragStart: fnOnDragStart, 
                    onDragEnter: fnOnDragEnter,
                    onDragOver: fnOnDragOver,
                    onDragLeave: undefined,
                    onDragEnd: fnOnDragEnd,
                    onDrop: fnOnDrop,

                    fnOnDragStart: fnOnDragStart, 
                    fnOnDragEnter: fnOnDragEnter,
                    fnOnDragOver: fnOnDragOver,
                    fnOnDragEnd: fnOnDragEnd,
                    fnOnDrop: fnOnDrop

                }, options);

                setLibData(settings.elemPlaceholder, 'dropEffect', settings.dropEffect);
                setLibData(settings.elemPlaceholder, 'effectAllowed', settings.effectAllowed);

                function fnOnDragStart(evt) {
                    var dragSource = setDragSource($(this));
                    setDragTarget(undefined);
                    var target = $(settings.elemPlaceholder);
                    setLibData(target, 'dropTarget', getLibData(dragSource, 'dropTarget'));
                    target.css('padding', 0);
                    target.css('margin', 0);
                    target.css('height', dragSource.innerHeight());
                    target.css('width', dragSource.innerWidth());

                    var origEvt = evt.originalEvent;
                    setTimeout(function() {
                        target.insertAfter(dragSource);
                        dragSource.addClass('jlw-dad-dragging');
                    }, 0);
                    origEvt.dataTransfer.effectAllowed = getLibData(dragSource, 'effectAllowed');
                    origEvt.dataTransfer.dropEffect = getLibData(dragSource, 'dropEffect');
                    $(this).trigger('onDragStart.jlwDad');
                }

                function fnOnDragEnter(evt) {
                    var origEvt = evt.originalEvent;
                    var $dragSource = $(getDragSource());
                    var $dragTarget = $(getDragTarget());

                    if ($dragTarget.is(evt.currentTarget)) {
                        evt.preventDefault();
                        evt.stopPropagation();
                        return;
                    }


                    var oDadSource = $dragSource.data(commonNamespace);
                    var $target = $(evt.currentTarget);
                    setDragTarget($target);

                    if (!oDadSource || !oDadSource.isTargetInDropZone($target)) {
                        origEvt.dataTransfer.dropEffect = 'none';
                        origEvt.dataTransfer.effectAllowed = 'uninitialized';
                        return;
                    }


                    var oDadTarget = $target.data(commonNamespace);
                    
                    //console.log('fnOnDragEnter', $dragSource, oDadSource, $dragTarget);

                    if (oDadTarget) {
                        if (oDadTarget.showPlaceholder) {
                            window.setTimeout(function() {
                                if ($(oDadTarget.elemParent).is($target)) {
                                    //Target is same as elemParent
                                    return;
                                }


                                var $targetPlaceholder = $(oDadTarget.elemPlaceholder);
                                var $sourcePlaceholder = $(oDadSource.elemPlaceholder);
                                var comp = compareSiblings($target, $targetPlaceholder);

                                $targetPlaceholder.css('padding', 0);
                                $targetPlaceholder.css('margin', 0);
                                $targetPlaceholder.css('height', $sourcePlaceholder.innerHeight());
                                $targetPlaceholder.css('width', $sourcePlaceholder.innerWidth());

                                
                                //console.log('Target Compare: ', comp, $target, $targetPlaceholder);
                                switch(comp) {
                                    case 0:
                                        // Target is Placeholder, do nothing
                                        break;
                                    case 1:
                                        // Target is after Placeholder
                                        $targetPlaceholder.insertAfter($target);
                                        //console.log('insert after target');

                                        break;
                                    case -1:
                                        // Target is before Placeholder
                                        var $prev = $targetPlaceholder.prev();
                                        //console.log('Target is before Placeholder', $prev.get(0));
                                        if ($target.is($prev)) {
                                            $targetPlaceholder.insertBefore($target);
                                            //console.log('insert before target');
                                            break;
                                        }
                                        $targetPlaceholder.insertBefore($target);
                                        //console.log('insert before target');

                                        break;
                                    case null:
                                        $targetPlaceholder.insertBefore($target);
                                        break;
                                }

                            }, 0);
                        }
                        evt.preventDefault();
                        evt.stopPropagation();

                        origEvt.dataTransfer.dropEffect = oDadSource.dropEffect;
                    }
                }

                function fnOnDragOver(evt) {
                    var origEvt = evt.originalEvent;
                    var dragSource = getDragSource();
                    var oDad = $(dragSource).data(commonNamespace);
                    if (!oDad || !oDad.isTargetInDropZone(evt.currentTarget)) {
                        origEvt.dataTransfer.dropEffect = 'none';
                        origEvt.dataTransfer.effectAllowed = 'uninitialized';
                        return;
                    }

                    evt.preventDefault();
                    evt.stopPropagation();
                    origEvt.dataTransfer.dropEffect = oDad.dropEffect;
                }

                function fnOnDrop(evt) {
                    console.log('fnOnDrop', evt);
                    var dragSource = getDragSource();
                    evt.preventDefault();
                    evt.stopPropagation();
                    var origEvt = evt.originalEvent;
                    var target = getLibData(origEvt.currentTarget, 'dropTarget');
                    triggerCallbackEvent(target, 'dragdrop', [dragSource, origEvt]);
                    return true;
                }

                function fnOnDragEnd(evt) {
                    var dragSource = getDragSource();
                    var dragTarget = getDragTarget();

                    setTimeout(function() {
                        var oDad = $(dragSource).data(commonNamespace);
                        // remove placeholders from source parent
                        if (oDad && oDad.elemParent) 
                            $(oDad.elemParent).closest('body').find('.jlw-dad-placeholder').detach();

                        oDad = $(dragTarget).data(commonNamespace);
                        // remove placeholders from target parent
                        if (oDad && oDad.elemParent) 
                            $(oDad.elemParent).closest('body').find('.jlw-dad-placeholder').detach();

                        if (dragSource)
                            dragSource.removeClass('jlw-dad-dragging');

                        $(evt.currentTarget).removeClass('jlw-dad-dragging');
                    }, 0);
                    
                    setLibData(settings.elemPlaceholder, 'dropTarget', undefined);
                    settings.elemPlaceholder.css('padding', 0);
                    settings.elemPlaceholder.css('margin', 0);
                    settings.elemPlaceholder.css('height', 0);
                    settings.elemPlaceholder.css('width', 0);
                    var args = [dragSource, dragTarget];
                    setDragSource(undefined);
                    setDragTarget(undefined);
                    
                    triggerCallbackEvent($(this), 'dragend', args);
                }

                function addDropZone(elem, dropEffect) {
                    var o = $(elem);
                    //setLibData(o, 'dropTarget', o);
                    //setLibData(o, 'dropEffect', dropEffect || getLibData(o, 'dropEffect') || settings.dropEffect);
                    if (!o.data(commonNamespace))
                        o.data(commonNamespace, settings);

                    //console.log('addDropZone', elem, dropEffect, settings);
                    o.each(function(idx, parent) {
                        var $parent = $(parent);
                        var $children = $parent.children('*[draggable=true]');

                        if (!$children.length) {
                            bindLibEvent($parent, 'dragenter', settings.onDragEnter);
                            bindLibEvent($parent, 'dragover', settings.onDragOver);
                        }

                        if (settings.onDrop)
                            bindLibEvent($parent, 'drop', settings.onDrop);

                        if (validDropZones.indexOf($parent.get(0)) === -1)
                            validDropZones.push($parent.get(0));

                        //console.log($parent, settings);
                    });
                }

                function addDragElement(elem, dropTarget, effectAllowed, dropEffect) {
                    var o = $(elem);
                    
                    if (!o.data(commonNamespace))
                        o.data(commonNamespace, settings);

                    setLibData(o, 'dropTarget', dropTarget || getLibData(o, 'dropTarget') || settings.elemParent);
                    setLibData(o, 'dropEffect', dropEffect || getLibData(o, 'dropEffect') || settings.dropEffect);
                    setLibData(o, 'effectAllowed', dropEffect || getLibData(o, 'effectAllowed') || settings.effectAllowed);
                    if (getLibData(o,'showPlaceholder') === undefined) {
                        setLibData(o, 'showPlaceholder', settings.showPlaceholder);
                    }
                    if (settings.onDragStart)
                        bindLibEvent(elem, 'dragstart', settings.onDragStart);

                    if (settings.onDragEnter)
                        bindLibEvent(elem, 'dragenter', settings.onDragEnter);

                    if (settings.onDragOver)
                        bindLibEvent(elem, 'dragover', settings.onDragOver);

                    if (settings.onDragLeave)
                        bindLibEvent(elem, 'dragleave', settings.onDragLeave);

                    if (settings.onDragEnd)
                        bindLibEvent(elem, 'dragend', settings.onDragEnd);
                }

                function compareSiblings(a, b) {
                    var $a = $(a);
                    var $b = $(b);
                    
                    // Are they the same element?
                    if ($a.is($b))
                        return 0;

                    var $parent = $a.parent();
                    // If parents are not the same, then can't be siblings
                    if (!$parent.is($b.parent()))
                        return null;

                    var $siblings = $parent.children();

                    var idxA = -1;
                    var idxB = -1;
                    $siblings.each(function(i, elem) {
                        idxA = $a.is(elem) ? i : idxA;
                        idxB = $b.is(elem) ? i : idxB;
                    });

                    return idxA > idxB ? 1 : -1;
                }

                function isTargetInDropZone(target) {
                    var $target = $(target);
                    var $dragSource = $(getDragSource());
                    var oDadSource = $dragSource.jlwDad();

                    //console.log('isTargetInDropZone', $target, $target.is(oDadSource.validDropZones), $target.closest(oDadSource.validDropZones).get(0), oDadSource.validDropZones);
                    if ($target.is(oDadSource.validDropZones) || $target.closest(oDadSource.validDropZones).get(0))
                        return true;
                    
                    return false;

                }

                /*
                function isSourceInDropZone() {
                    var dragSource = getDragSource();
                    var dropZone = (getLibData(dragSource, 'dropTarget')||[undefined])[0];
                    //var $dragTarget = $(getDragTarget());
                    //if ($dragTarget)
                    
                    //console.log(dragTarget, dropZone, validDropZones);
                    for (var i = 0; i < validDropZones.length; i++) {
                        if (validDropZones[i] === dropZone)
                            return true;
                    }
                    
                    return false;

                }
                */
                
                function getDragSource() {
                    return $.fn.jlwDad.currentDragSource;
                }

                function getDragTarget() {
                    return $.fn.jlwDad.currentDragTarget;
                }

                function setDragSource(value) {
                    return $.fn.jlwDad.currentDragSource = value;
                }

                function setDragTarget(value) {
                    return $.fn.jlwDad.currentDragTarget = value;
                }

                function setLibData(elem, key, value) {
                    $(elem).data(commonNamespace + '.' + key, value);
                }

                function getLibData(elem, key) {
                    return $(elem).data(commonNamespace + '.' + key);
                }

                function bindLibEvent(elem, eventName, fnCallback) {
                    var $elem = $(elem);
                    var libEventBinding = $elem.data(libCallbackNamespace + '_EventsBound');
                    if (!libEventBinding) {
                        libEventBinding = {};
                        $elem.data(libCallbackNamespace + '_EventsBound', libEventBinding);
                    }
                    if (!libEventBinding[eventName]) {
                        libEventBinding[eventName] = true;
                        $elem
                            .off(eventName + libCallbackNamespace)
                            .on(eventName + libCallbackNamespace, fnCallback);
                    }
                }

                function triggerCallbackEvent(elem, eventName, args) {
                    $(elem).triggerHandler(eventName + callbackNamespace,args);
                }

                return settings;
            }

            var lib = $(this.get(0)).data(commonNamespace);

            if (opts) {
                lib = new libDad(opts);
                if (!lib.elemParent)
                    lib.elemParent = $(this);


                if ($(lib.elemParent).length) {
                    $(lib.elemParent).each(function(i,elem) {
                        var $elem = $(elem);
                        if (!$elem.data(commonNamespace))
                            $elem.data(commonNamespace, lib);
                        $elem.children('*[draggable=true]').each(function(i, child) {
                            lib.addDragElement(child, $elem);
                        });
                        lib.addDropZone(elem);
                    });
                }
                lib.addDropZone(lib.elemPlaceholder);
            }

            return lib;
        }
        $.fn.jlwDad.nLibCount = 0;
    }
})(jQuery);
</script>