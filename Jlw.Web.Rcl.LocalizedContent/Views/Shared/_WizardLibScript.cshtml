<script>
    function libJlwWizardBase(t, $, initOptions, undefined) {
        var currSection = 0;
        var currStep = 0;
        var lastSection = 0;
        var lastStep = 0;

        t.wizardFields = t.wizardFields || [ ];
        t.wizardParent = $(window.document);

        t.debugLevel = t.debugLevel || 0;
        t.renderWizard = t.renderWizard || renderWizard;
        t.renderValidFormFields = t.renderValidFormFields || renderValidFormFields;
        t.renderInvalidFormFields = t.renderInvalidFormFields || renderInvalidFormFields;

        t.initializeWizard = t.initializeWizard || initializeWizard;

        t.fnOnClickNav = t.fnOnClickNav || fnOnClickNav;
        t.fnOnClickBack = t.fnOnClickBack || fnOnClickBack;
        t.fnOnClickLink = t.fnOnClickLink || fnOnClickLink;
        t.fnOnClickSave = t.fnOnClickSave || fnOnClickSave;
        t.fnOnClickAction = t.fnOnClickAction || fnOnClickAction;

        t.onRenderWizardFormField = t.onRenderWizardFormField || onRenderWizardFormField;

        t.ajaxFail = t.ajaxFail || ajaxFail;
        t.navToStep = t.navToStep || navToStep;
        t.navToScreen = t.navToScreen || navToScreen;
        t.navToWizardScreen = t.navToWizardScreen || navToWizardScreen;

        t.saveStep = t.saveStep || saveStep;

        if (initOptions)
            t.initializeWizard(initOptions);

        function initializeWizard(opts) {
            $ = opts['$'] || $;
            t.urlRoot = opts['urlRoot'] || t.urlRoot;
            t.urlApiRoot = opts['urlApiRoot'] || t.urlApiRoot || t.urlRoot;
            t.debugLevel = opts['debugLevel'] || t.debugLevel;
            t.onRenderWizardFormField = opts["onRenderWizardFormField"] || t.onRenderWizardFormField;
            t.onRenderWizardElement = opts["onRenderWizardElement"] || t.onRenderWizardElement;
            t.wizardParent = $(opts["wizardParent"]) || t.wizardParent;
            $(".list-group.wizard-nav button").off().on('click', t.fnOnClickNav);
            t.populateFormData(opts["formData"] || {}, t.wizardParent);
        }

        function fnOnClickNav(evt) {
            var btn = $(evt.target);
            var section = btn.data('section');
            var step = btn.data('step');
            var fn = btn.data('fnclick');
            if (fn && typeof t[fn] == 'function') {
                t[fn](evt);
            }

            t.navToStep(section, step);
            return false;
        }

        function fnOnClickBack(evt) {
            var btn = $(evt.target);
            var section = lastSection;
            var step = lastStep;
            t.navToStep(section, step);
            return false;
        }

        function fnOnClickLink(evt) {
            var btn = $(evt.target);
            var url = btn.data('url');
            window.location = url.replace('~/', t.urlRoot);
            return false;
        }

        function fnOnClickSave(evt) {
            var btn = $(evt.target);
            var section = btn.data('section');
            var step = btn.data('step');
            var fn = btn.data('fnclick');
            if (fn && typeof t[fn] == 'function') {
                t[fn](evt);
            }
            t.saveStep(section, step);
            return false;
        }

        function fnOnClickAction(evt) {
            var btn = $(evt.target);
            switch (btn.data("type")) {
                case 'nav':
                    return t.fnOnClickNav(evt);
                    break;
                case 'save':
                    return t.fnOnClickSave(evt);
                    break;
                case 'back':
                    return t.fnOnClickBack(evt);
                    break;
                case 'link':
                    return t.fnOnClickLink(evt);
                    break;
            }
        }

        function fnOnChange(evt) {
            var o = $(evt.target);
            var fn = o.data('fnChange');
            if (fn && typeof t[fn] == 'function') {
                t[fn](evt);
            }
            return false;
        }

        function navToStep(section, step) {

            var frmData = t.serializeFormToJson($('.wizard-form'));
            frmData["Wizard"] = "";
            frmData["Screen"] = "";
            frmData["Section"] = frmData["Section"] || section;
            frmData["Step"] = frmData["Step"] || step;
            var prm = t.post(t.urlApiRoot, frmData, null, ajaxFail)
                .done(function(data, status, jqXhr) {
                    renderWizard(section, step, data);
                });
            $("input,select,textarea", $('.wizard-form')).prop("disabled",true);

            return prm;
        }

        function navToScreen(screenId) {

            var frmData = t.serializeFormToJson($('.wizard-form'));
            frmData["Wizard"] = "";
            frmData["Screen"] = screenId;
            frmData["Section"] = "";
            frmData["Step"] = "";
            var prm = t.post(t.urlApiRoot, frmData, null, ajaxFail)
                .done(function(data, status, jqXhr) {
                    renderWizard(0, 0, data);
                });
            $("input,select,textarea", $('.wizard-form')).prop("disabled",true);

            return prm;
        }

        function navToWizardScreen(wizard, screenId) {

            var frmData = t.serializeFormToJson($('.wizard-form'));
            frmData["Wizard"] = wizard;
            frmData["Screen"] = screenId;
            frmData["Section"] = "";
            frmData["Step"] = "";
            var prm = t.post(t.urlApiRoot, frmData, null, ajaxFail)
                .done(function(data, status, jqXhr) {
                    renderWizard(0, 0, data);
                });
            $("input,select,textarea", $('.wizard-form')).prop("disabled",true);

            return prm;
        }

        function renderButton(o) {
            var icon = o['Icon'] ? '<span class="' + o['Icon'] + '" /></span> ' : '';
            var col = $('<div class="' + o["Wrapper"] + '"></div>');
            var action = o["Action"] || {}
            var data = '';
            if (action['type']) data += ' data-type="' + action['type'] + '"';
            if (action['section']) data += ' data-section="' + action['section'] + '"';
            if (action['step']) data += ' data-step="' + action['step'] + '"';
            if (action['url']) data += ' data-url="' + action['url'] + '"';
            if (action['fnClick']) data += ' data-fnclick="' + action['fnClick'] + '"';
            var btn = $('<button type="button" class="' + o["Class"] + '" ' + data + '>' + icon + o["Label"] + '</button>');
            col.append(btn);
            btn.on('click', fnOnClickAction);

            o['ElementId'] = o['GroupKey'] + '-' + o['FieldType'] + '-' + o['FieldKey'] + '-' + (o['Id']||(new Date()).valueOf());
            //o['ElementObject'] = btn;
            //o['ElementContainer'] = col;
            btn.attr('id', 'jlwButton-' + o['ElementId']);
            col.attr('id', 'jlwContainer-'+o['ElementId']);

            if (typeof(t.onRenderWizardElement) === 'function') {
                t.onRenderWizardElement(btn, o, col);
            }

            return col;
        }

        function setButtonAction(btnWrapper, action) {
        }

        function renderWizardButtons(buttons) {
            var btns = $('.wizard-buttons');
            btns.empty();
            for (var i = 0; i < buttons.length; i++) {
                var o = buttons[i];
                var btn = renderButton(o);
                btns.append(btn);
                setButtonAction(btn, o["Action"] || "");
            }
        }

        function renderWizardForm(data) {
            var wrapper = $("<div></div>");
            var formBody = $('<div class=""></div>');
            var headingText = data["Label"];
            var fields = data['Fields'] || [];
            var i = 0;

            //Todo: Remove next line after debugging:
            if (t.debugLevel >= 10) headingText = '[' + data["GroupKey"] + ' ' + data["FieldKey"] + ']' + headingText;

            if (data['WrapperClass'])
                wrapper.addClass(data['WrapperClass']);

            if (data['FieldClass'])
                formBody.addClass(data['FieldClass']);

            for (i = 0; i < fields.length; i++) {
                data["UsedFields"][fields[i]["FieldKey"]] = true;
                renderWizardFormField(fields[i], formBody);
            }

            var btn = "";
            if (data["UseCardLayout"]) {
                wrapper.addClass('card');
                if (data["Label"]) {
                    var header = $('<div class="card-header"><div class="h5">' + headingText + '</div></div>');
                    if (data["EditButton"] && typeof (data["EditButton"]) == "object") {
                        btn = renderButton(data["EditButton"]);
                        btn.addClass('float-right');
                        header.prepend(btn);
                    }
                    wrapper.append(header);
                }
                var wrapperBody = $('<div class="card-body"></div>');
                wrapperBody.append(formBody);
                wrapper.append(wrapperBody);
            } else {
                wrapper.append(formBody);
            }
            var id = (data['GroupKey'] + '-' + data['FieldType'] + '-' + data['FieldKey'] + '-' + (data['Id']||(new Date()).valueOf())).replace(/[^\w\d-_]/i, '');

            data['ElementId'] = id;
            //formBody.attr('id', 'jlwElement-' + data['ElementId']);
            wrapper.attr('id', 'jlwElement-'+data['ElementId']);

            if (typeof(t.onRenderWizardElement) === 'function') {
                t.onRenderWizardElement(wrapper, data, wrapper);
            }

            $(".wizard-body").append(wrapper);
            if (data["EditButton"] && typeof (data["EditButton"]) == "object" && typeof (btn) == "object") {
                setButtonAction(btn, data["EditButton"]["Action"] || "");
            }
        }

        // Callback when a form field is rendered
        function onRenderWizardFormField(obj, data, parent) {
            return obj;
        }

        // Callback when a form field is rendered
        function onRenderWizardElement(obj, data, parent) {
            return obj;
        }

        function renderWizardElement(data, parent, wizardData) {
            var obj = {};
            if (typeof(data) !== 'object' || typeof(data['FieldType']) !== 'string')
                return obj;

            //console.log(data)
            var type = data['FieldType'] || "";
            switch (type.toUpperCase()) {
                case 'HEADING':
                    obj = $('.wizard-heading', parent);
                    break;
                case 'BODY':
                    obj = $('.wizard-body', parent);
                    break;
            }
            if (obj.length < 1)
                return {};

            data['ElementId'] = data['GroupKey'] + '-' + data['FieldType'] + '-' + data['FieldKey'] + '-' + (data['Id']||(new Date()).valueOf());
            obj.attr('id', 'jlwElement-' + data['ElementId']);
            obj.html(data['Label'] || data["DefaultLabel"] || "");

            if (typeof(t.onRenderWizardElement) === 'function')
                obj = t.onRenderWizardElement(obj, data, parent);
            return obj;
        }

        function renderWizardFormField(data, parent) {
            var field = data["FieldType"] || "";
            var fieldData = data["FieldData"] || {};
            var type = fieldData["type"] || "";
            var group = data["GroupKey"];
            var name = data["FieldKey"];
            var label = data["Label"] || "&nbsp;";
            var wrapperClass = data["WrapperClass"] || "";
            var wrapperStart = data["WrapperHtmlStart"] || "";
            var wrapperEnd = data["WrapperHtmlEnd"] || "";
            var obj;
            var id = group + '-' + field + '-' + name + '-' +(data['Id']||(new Date()).valueOf());
            id = (id).replace(/[^\w\d-_]/i, '');

            var props = ' id="' + id + '" ';

            if (fieldData["props"])
                props += fieldData['props'] + ' ';


            switch (field.toLowerCase()) {
                case 'separator':
                    if (data["FieldClass"]) {
                        props += 'class="' + data.FieldClass + '" ';
                    }

                    obj = $('<div><hr ' + props + '/></div>');
                    break;
                case 'select':
                    if (data["FieldClass"]) {
                        props += 'class="' + data.FieldClass + '" ';
                    }
                    var slct = $('<select name="' + name + '"' + props + '></select>');

                    if (fieldData['onchange']) {
                        slct.data('fnChange', fieldData['onchange']);
                        slct.on('change', fnOnChange);
                    }

                    obj = $('<div>' + wrapperStart + '<label for="' + id + '">' + label + '</label></div>');
                    obj.append(slct);

                    if (wrapperEnd)
                        obj.append($(wrapperEnd));
                    if (fieldData["data"]) {
                        for (var i = 0; i < fieldData["data"].length; i++) {
                            var opt = fieldData["data"][i];
                            slct.append($('<option value="' + opt["Key"] + '">' + opt["Value"] + '</option>'));
                        }
                    }
                    break;
                case 'input':
                    switch (type.toLowerCase()) {
                        case 'hidden':
                            obj = $(wrapperStart + '<input type="hidden" name="' + name + '" ' + props + ' value="" />' + wrapperEnd);
                            break;
                        case 'checkbox':
                            if (data["FieldClass"])
                                props += 'class="' + data.FieldClass + '" ';

                            obj = $('<div>' + wrapperStart + '<div class="form-check"><input type="checkbox" name="' + name + '" ' + props + '/><label class="form-check-label" for="' + id + '">' + label + '</label></div>' + wrapperEnd + '</div>');
                            break;
                        case 'radio':
                            if (data["FieldClass"])
                                props += 'class="' + data.FieldClass + '" ';

                            obj = $('<div>' + wrapperStart + '<div class="form-check"><label class="form-check-label" for="' + id + '"><input type="radio" name="' + name + '" ' + props + '/>' + label + '</label></div>' + wrapperEnd + '</div>');
                            break;
                        case 'text':
                            if (data["FieldClass"])
                                props += 'class="' + data.FieldClass + '" ';

                            if (fieldData["maxlength"])
                                props += 'maxlength="' + fieldData['maxlength'] + '"';

                            obj = $('<div>' + wrapperStart + '<label for="' + id + '">' + label + '</label><input type="text" name="' + name + '" value=""' + props + '/>' + wrapperEnd + '</div>');
                            break;
                        case 'date':
                            if (data["FieldClass"])
                                props += 'class="' + data.FieldClass + '" ';

                            if (fieldData["pattern"])
                                props += 'pattern="' + fieldData['pattern'] + '"';

                            obj = $('<div>' + wrapperStart + '<label for="' + id + '">' + label + '</label><input type="date" name="' + name + '" value=""' + props + '/>' + wrapperEnd + '</div>');
                            break;
                    }
                    break;
                case 'textarea':
                    if (data["FieldClass"])
                        props += 'class="' + data.FieldClass + '" ';


                    obj = $('<div>' + wrapperStart + (label ? '<label for="' + id + '">' + label + '</label>' : '') + '<textarea name="' + name + '" ' + props + '></textarea>' + wrapperEnd + '</div>');
                    break;
                case 'html':
                    //Todo: Remove next line after debugging:
                    if (t.debugLevel >= 10) label = '[' + data["GroupKey"] + ' ' + data["FieldKey"] + ']' + label;
                    obj = $('<div>' + wrapperStart + label + wrapperEnd + '</div>');
                    break;
            }

            if (obj) {
                $(obj).attr("id", 'jlwContainer-' + id);

                $('input[id=""], input:not([id])', obj).each(function (i) {
                        
                    var id = $(this).prop("name") + '_' + i + '_' + (new Date()).valueOf();
                    $(this).attr("id", id);
                    //console.log(id);
                });

                if (wrapperClass)
                    obj.addClass(wrapperClass);

                // Process extra rendering if needed.
                t.onRenderWizardFormField(obj, data, parent);

                parent.append(obj);
            }
        }

        function renderWizard(section, step, data) {
            var heading = data["HeadingData"] || data["Heading"] || "";
            var body = data["BodyData"] || data["Body"] || "";
            var buttons = data["Buttons"];
            var forms = data["Forms"] || [];
            var fieldData = data["FieldData"] || {};
            var usedFields = {};
            var i;
            //Todo: Remove next line after debugging:
            if (t.debugLevel >= 10 && data['GroupKey']) heading = '[' + data["GroupKey"] + ' Heading]' + heading;
            if (t.debugLevel >= 10 && data['GroupKey']) body = '[' + data["GroupKey"] + ' Body]' + body;

            if (typeof(heading) === 'string')
                data["Heading"] = heading = { 'GroupKey':data["GroupKey"], 'FieldKey':'Heading', 'FieldType':'HEADING', 'Label': heading };

            heading["FieldType"] = "HEADING";

            renderWizardElement(heading, t.wizardParent, data);

            if (typeof(body) === 'string')
                data["Body"] = body = { 'GroupKey':data["GroupKey"], 'FieldKey':'Body', 'FieldType':'BODY', 'Label': body };

            body["FieldType"] = "BODY";
            renderWizardElement(body, t.wizardParent, data);
            //console.log(data);

            renderWizardButtons(buttons || []);
            if (forms && forms.length) {
                for (i = 0; i < forms.length; i++) {
                    forms[i]["UsedFields"] = usedFields;
                    renderWizardForm(forms[i] || { 'UsedFields': usedFields });
                    usedFields = forms[i]["UsedFields"];
                }
            } else {
                renderWizardForm({ 'UsedFields': usedFields });
            }

            var formBody = $(".wizard-body");
            for (i = 0; i < t.wizardFields.length; i++) {
                if (!usedFields[t.wizardFields[i]])
                    formBody.append($('<input type="hidden" name="' + t.wizardFields[i] + '" value="" />'));
            }

            if (data["FormData"]) {
                t.renderInvalidFormFields(data["FormData"]['InvalidFields']);
                t.renderValidFormFields(data["FormData"]['ValidFields']);
                section = data["FormData"]["Section"] || section;
                step = data["FormData"]["Step"] || step;
            }
            if (currSection != section || currStep != step) {
                lastSection = currSection;
                lastStep = currStep;

                currSection = section;
                currStep = step;
            }

            $('.wizard-nav button').removeClass('active');
            var nav = $('.wizard-nav button[data-section=' + section + '][data-step=' + step + ']');
            if (!nav.length)
                nav = $('.wizard-nav button[data-section=' + section + ']').first();
            nav.addClass('active');

            $('input[type!=hidden], select, textarea, button', $('.wizard-form')).first().focus();

            t.populateFormData(data["FormData"] || {}, $('.wizard-form'));
            if (fieldData["onload"]) {
                var fn = new Function('data', 'lib', 'form', 'try{ ' + fieldData['onload'] + '; } catch(ex) { if(console){console.log(ex)} }');
                window.setTimeout(function() { fn(data, t, formBody); }, 1);
            }
        }

        function renderValidFormFields(validFields) {
            if (validFields) {
                for (var key in validFields) {
                    var feedback = validFields[key];
                    var o = $('input[type!=hidden][name=' + key + '], select[name=' + key + '], textarea[' + key + ']', $('.wizard-form')).first();
                    o.addClass('is-valid');
                    var id;
                    if (o[0] && feedback) {
                        id = o[0].id;
                        o.attr('aria-describedby', id + "Feedback");
                        o.parent().append($('<div id="' + id + 'Feedback" class="valid-feedback">' + feedback + '</div>'));
                    }
                }
            }
        }

        function renderInvalidFormFields(invalidFields) {
            if (invalidFields) {
                var nCount = 0;
                for (var key in invalidFields) {
                    var feedback = invalidFields[key];
                    var o = $('input[type!=hidden][type!=radio][name=' + key + '], select[name=' + key + '], textarea[name=' + key + ']', $('.wizard-form')).first();
                    var id;
                    if (o.length > 0) {
                        o.addClass('is-invalid');
                        if (o[0] && feedback) {
                            id = o[0].id;
                            o.attr('aria-describedby', id + "Feedback");
                            o.parent().append($('<div id="' + id + 'Feedback" class="invalid-feedback">' + feedback + '</div>'));
                            nCount++;
                        }
                    } else {
                        o = $('input[type=radio][name=' + key + ']', $('.wizard-form')).first();
                        o.addClass('is-invalid');
                        if (o[0] && feedback) {
                            id = o[0].id;
                            o.attr('aria-describedby', id + "Feedback");
                            o.parent().parent().parent().append($('<div id="' + id + 'Feedback" class="invalid-feedback d-inline-block">' + feedback + '</div>'));
                            nCount++;
                        }

                    }
                }
                if (nCount > 0) {
                    $('.wizard-body').prepend('<div class="text-danger ">&bull; Please correct the information below before submitting the form.</div>');
                }
            }
        }

        function ajaxFail(jqXhr, textStatus, errorThrown) {
            var data = null;
            var re = new RegExp('application/json', 'i');
            if (re.test(jqXhr.getResponseHeader("content-type"))) {
                data = jQuery.parseJSON(jqXhr.responseText);
            } else {
                data = { Message: jqXhr.status + " - " + textStatus + ": " + errorThrown, MessageType: t.messageTypes.Danger, 'Title': 'An error has occurred' }
            }


            if (jqXhr && (jqXhr["status"] >= 400 || jqXhr["status"] < 500) && jqXhr["getResponseHeader"]) {
                // jqXhr is only populated on fail
                var loc = jqXhr.getResponseHeader("location");
                if (loc) {
                    jqXhr["status"] = 401;
                }
            }


            t.checkAjaxMessage(data, textStatus, jqXhr);
            t.hidePleaseWait();
            return false;
        }

        function saveStep(section, step) {

            var frmData = t.serializeFormToJson($('.wizard-form'));
            frmData["Section"] = frmData["Section"] || section;
            frmData["Step"] = frmData["Step"] || step;

            var prm = t.post(t.urlApiRoot + "/Save", frmData, null, t.ajaxFail).done(function (data, status, jqXhr) {
                t.renderWizard(section, step, data);
            });
            $("input,select,textarea", $('.wizard-form')).prop("disabled", true);
            return prm;
        }

        function debug(level) {
            if (t.debugLevel <= level) return;

            if (console) {
                switch (arguments.length) {
                case 2:
                    console.log(arguments[1]);
                    break;
                case 3:
                    console.log(arguments[1], arguments[2]);
                    break;
                case 4:
                    console.log(arguments[1], arguments[2], arguments[3]);
                    break;
                case 5:
                    console.log(arguments[1], arguments[2], arguments[3], arguments[4]);
                    break;
                case 6:
                    console.log(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                    break;
                case 7:
                    console.log(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
                    break;
                }
            }
        }

        return t;
    }
</script>