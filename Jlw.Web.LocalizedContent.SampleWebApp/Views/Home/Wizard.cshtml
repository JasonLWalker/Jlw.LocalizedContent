@using Jlw.Data.LocalizedContent
@using Jlw.Web.Rcl.LocalizedContent
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Newtonsoft.Json
@inject IWizardFactoryRepository FactoryRepository
@inject IWizardAdminSettings WizardSettings
@model object
@{
	string version = typeof(Jlw.Web.Rcl.LocalizedContent.Areas.ModularWizardAdmin.Controllers.AdminController).Assembly.GetName().Version?.ToString();
	version = string.IsNullOrWhiteSpace(version) || version == "0.0.0.1" ? DateTime.Now.Ticks.ToString() : version;

	ViewData["Title"] = "Sample Wizard";
    ViewData["Breadcrumb"] ??= new List<KeyValuePair<string, string>>()
	{
        new KeyValuePair<string, string>(Url.Action("Index", "Home", new {Area = (string)null}), "Home"),
        new KeyValuePair<string, string>(Url.Action("Wizard", "Home",new {Area = (string)null}), "Sample Wizard"),
        new KeyValuePair<string, string>(Url.Action("Wizard", "Home",new {Area = (string)null}), "Start"),
    };
	string jsRoot = WizardSettings.JsRoot;
	string wizardName = "SampleWizard";

	var sideNav = FactoryRepository.GetWizardSideNavData(wizardName);
}
<div class="row">
    @{//if (!Model.WizardComplete)
        //{
	    if (WizardSettings.ShowSideNav)
	    {
		    <div class=" d-lg-inline-block wizard-nav-col col-lg-auto border-right">
			    <form method="post">
				    <div class="list-group wizard-nav">
					    @foreach (var item in sideNav)
					    {
						    if (!item.IsHidden)
						    {
							    <button type="button" data-section="@item.Section" data-step="@item.Step" data-screen="@item.Screen" data-wizard="@item.Wizard" class="list-group-item list-group-item-action @item.ClassName"> @Html.Raw(item.Label)</button>
						    }
					    }
				    </div>
			    </form>
		    </div>
	    }
    }
    <div class="col-md wizard-form">
        <form method="post">
            <div class="h3 wizard-heading">@(ViewData["Heading"] ?? ViewData["Title"])</div>
            <div class="wizard-body clearfix">

                <div class="spinner-border spinner-border-sm float-start my-1" role="status"></div>
                <div class="p-0">
                    <div class="h5">&nbsp;Please wait, loading...</div>
                    <input type="hidden" name="step" value="" />
                    <input type="hidden" name="section" value="" />
                </div>
            </div>
            <div class="wizard-buttons row clearfix">
            </div>
        </form>
    </div>
</div>
@section Scripts{
    <script src="@Url.Action("WizardLibScript", "WizardJs")?_=@version"></script>
    <script src="~/LocalizedContent/js/libJlwUtility.min.js"></script>
    <script src="~/LocalizedContent/js/bootbox.min.js"></script>
    <script src="@Url.Content($"~/{jsRoot}/font-awesome/js/all.min.js")"></script>
    <script src="@Url.Content($"~/{jsRoot}/font-awesome/js/fontawesome.min.js")"></script>
    <script>
        (function(t, $, initOptions, undefined) {

            var wiz = window.libJlwWizardBase(t || new window.libJlwUtility() || {}, $, initOptions, undefined);

            t.wizardFields = @Html.Raw(JsonConvert.SerializeObject(FactoryRepository.GetWizardModelFields(wizardName, "Sample%") ?? new object()));
	        @*[
                'ApplicationId',
                'DigitalSignature'
            ];*@
            //t.initializeWizard = initialize;
            t.urlApiRoot = t.urlApiRoot || t.urlRoot + "api/Wizard";
            t.onRenderWizardFormField = t.onRenderWizardFormField || onRenderWizardFormField;


            if (initOptions)
                initialize(initOptions);

            function initialize(opts) {
                currApplicationId = opts["ApplicationId"];
                var btn = $("nav .breadcrumb .breadcrumb-item>a[href$='\/Wizard']");
                /*
                btn.data('section', 0);
                btn.data('step', 0);

                btn.off().on('click', t.fnOnClickAction);
                */
                t.navToScreen(opts['screen']).done(function() {
                    //$('.wizard-form .wizard-body').html('');
                    t.populateFormData(opts["formData"] || {}, $('.wizard-form'));
                });

            }

        })(window.libSampleWizard = window.libSampleWizard || new window.libJlwUtility() || {}, window.jQuery, {
            'urlRoot': '@Html.Raw(Url.Action("Index", "Home"))',
            'urlApiRoot': '@Html.Raw(Url.Action("Index", "SampleWizardApi"))',
            //'debugLevel':11,
            'wizardParent': '.wizard-form',
            'screen': "StartHere",
            'wizard': "@wizardName"
        });
    </script>
}