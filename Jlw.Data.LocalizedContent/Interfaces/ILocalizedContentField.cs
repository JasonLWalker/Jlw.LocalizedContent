using System;
using Jlw.Utilities.Data;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

namespace Jlw.Data.LocalizedContent 
{ 
    /// <summary> 
    /// Class to encapsulate a row from the LocalizedContentFields database table 
    /// </summary> 
    public interface ILocalizedContentField 
    {
        /// <summary>Returns the unique Id of the record. Matches the [Id] column of the [LocalizedContentFields] table in the database.</summary>
        /// <returns>If the instance was created from a database record, then the autogenerated Id column is returned. Otherwise the default value is 0.</returns>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<long>))] 
        long Id { get; } 
         
        /// Member for GroupKey Database Column 
         
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<string>))] 
        string GroupKey { get; } 
         
        /// Member for FieldKey Database Column 
         
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<string>))] 
        string FieldKey { get; } 
         
        /// Member for FieldType Database Column 
         
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<string>))] 
        string FieldType { get; } 
         
        /// Member for FieldData Database Column 
         
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<string>))] 
        string FieldData { get; } 
         
        /// Member for FieldClass Database Column 
         
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<string>))] 
        string FieldClass { get; } 
         
        /// Member for ParentKey Database Column 
         
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<string>))] 
        string ParentKey { get; } 
         
        /// Member for DefaultLabel Database Column 
         
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<string>))] 
        string DefaultLabel { get; } 
         
        /// Member for WrapperClass Database Column 
         
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<string>))] 
        string WrapperClass { get; } 
         
        /// Member for WrapperHtmlStart Database Column 
         
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<string>))] 
        string WrapperHtmlStart { get; } 
         
        /// Member for WrapperHtmlEnd Database Column 
         
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<string>))] 
        string WrapperHtmlEnd { get; }

        /// Member for AuditChangeType Database Column 

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))]
        [JsonIgnore] 
        string AuditChangeType { get; }

        /// Member for AuditChangeBy Database Column 

        //[JsonIgnore] 
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))]
        string AuditChangeBy { get; }

        /// Member for AuditChangeDate Database Column 

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))]
        [JsonIgnore] 
        DateTime AuditChangeDate { get; }

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))]
        [JsonIgnore]
        string GroupFilter { get; set; }

        /// Member for Order Database Column 

        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, NamingStrategyType = typeof(DefaultNamingStrategy))] 
        [JsonConverter(typeof(JlwJsonConverter<int>))] 
        int Order { get; } 
         
    } 
} 
