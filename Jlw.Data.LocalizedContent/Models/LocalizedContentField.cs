using System;
using Jlw.Utilities.Data;

namespace Jlw.Data.LocalizedContent 
{
    /// <summary>
    /// Class to encapsulate a row from the [LocalizedContentFields] database table.
    /// This class is used as a structure to represent a single container, field, or attribute in a Form, Wizard, or Email.
    /// </summary>
    /// <autogeneratedoc />
    public class LocalizedContentField : ILocalizedContentField 
	{ 
 
		public long Id { get; protected set; }      
		public string GroupKey { get; protected set; }      
		public string FieldKey { get; protected set; }      
 
		/// Member for [FieldType] Database Column 
		public string FieldType { get; protected set; }      
 
		/// Member for [FieldData] Database Column 
		public string FieldData { get; protected set; }      
 
		/// Member for [FieldClass] Database Column 
		public string FieldClass { get; protected set; }      
 
		/// Member for [ParentKey] Database Column 
		public string ParentKey { get; protected set; }      
 
		/// Member for [DefaultLabel] Database Column 
		public string DefaultLabel { get; protected set; }      
 
		/// Member for [WrapperClass] Database Column 
		public string WrapperClass { get; protected set; }      
 
		/// Member for [WrapperHtmlStart] Database Column 
		public string WrapperHtmlStart { get; protected set; }      
 
		/// Member for [WrapperHtmlEnd] Database Column 
		public string WrapperHtmlEnd { get; protected set; }      
 
		/// Member for [AuditChangeType] Database Column 
		public string AuditChangeType { get; protected set; }      
 
		/// Member for [AuditChangeBy] Database Column 
		public string AuditChangeBy { get; protected set; }      
 
		/// Member for [AuditChangeDate] Database Column 
		public DateTime AuditChangeDate { get; protected set; }

        public string GroupFilter { get; set; }

        /// Member for [Order] Database Column 
		public int Order { get; protected set; }

		/// <summary>Initializes a new instance of the <see cref="LocalizedContentField" /> class. Members are set to their default values.</summary>
		/// <remarks>The default constructor will initialize all properties to their default values. All properties of type <c>string</c> will be initialized as empty strings instead of null.</remarks>
		/// <autogeneratedoc />
		public LocalizedContentField() => Initialize(null);

		/// <summary>Initializes a new instance of the <see cref="LocalizedContentField" /> class.</summary>
		/// <param name="o">Object used to initialize the class members.</param>
		/// <remarks>
		///   <para>The constructor will attempt to initialize properties with values parsed from matching fields in the parameter <paramref name="o">o</paramref>. </para>
		///   <para>If <paramref name="o">o</paramref> is some form of <c>KeyValuePair</c> collection, then the constructor will attempt to find keys within the collection that match the names of the class properties. </para>
		///   <para>If <paramref name="o">o</paramref> is a non-collection type object, the constructor will attempt to find a field or property whose name matches the class member, and parse the data using the member from <paramref name="o">o</paramref>.</para>
		/// </remarks>
		/// <autogeneratedoc />
		public LocalizedContentField(object o) => Initialize(o);


		/// <summary>Initializes and sets the properties of the <see cref="LocalizedContentField" /> class.</summary>
		/// <param name="o">Object used to initialize the class members.</param>
		/// <remarks>
		///   <para>The method will attempt to initialize properties with values parsed from matching fields in the parameter <paramref name="o" />. </para>
		///   <para>If <paramref name="o" /> is some form of <c>KeyValuePair</c> collection, then the method will attempt to find keys within the collection that match the names of the class properties. </para>
		///   <para>If <paramref name="o" /> is a non-collection type object, the method will attempt to find a field or property whose name matches the class member, and parse the data using the member from <paramref name="o" />.</para>
		///   <note><para>As a rule, no exceptions will be thrown if the method is unable find matching data to parse, or if the data is not in a compatible format. If this is not the desired behavior consider overriding this method in a descendant class.</para></note>
        /// </remarks>
		/// <autogeneratedoc />
		public virtual void Initialize(object o)
        {
            Id = DataUtility.Parse<long>(o, "Id");
			GroupKey = DataUtility.Parse<string>(o, "GroupKey");
			FieldKey = DataUtility.Parse<string>(o, "FieldKey");
			FieldType = DataUtility.Parse<string>(o, "FieldType");
			FieldData = DataUtility.Parse<string>(o, "FieldData");
			FieldClass = DataUtility.Parse<string>(o, "FieldClass");
			ParentKey = DataUtility.Parse<string>(o, "ParentKey");
			DefaultLabel = DataUtility.Parse<string>(o, "DefaultLabel");
			WrapperClass = DataUtility.Parse<string>(o, "WrapperClass");
			WrapperHtmlStart = DataUtility.Parse<string>(o, "WrapperHtmlStart");
			WrapperHtmlEnd = DataUtility.Parse<string>(o, "WrapperHtmlEnd");
			AuditChangeType = DataUtility.Parse<string>(o, "AuditChangeType");
			AuditChangeBy = DataUtility.Parse<string>(o, "AuditChangeBy");
			AuditChangeDate = DataUtility.Parse<DateTime>(o, "AuditChangeDate");
			Order = DataUtility.Parse<int>(o, "Order");
        }

	} 
} 
 
