name: Build and Deploy (Release Candidate)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Config Environment Variables
      run: |
        dotnet nuget add source https://nuget.pkg.github.com/${{ secrets.NUGET_USER }}/index.json --store-password-in-clear-text --name=github --username=${{ secrets.NUGET_USER }} --password=${{ secrets.GPR_TOKEN }}
        ./build-scripts/setenv.ps1
    - name: Run build script
      run: |
        ./build-scripts/build.ps1 "Jlw.Data.LocalizedContent" "Release" "-rc"
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PKGNAME }}
        path: |
          **/bin/Release
          **/obj/Release

  test:
    needs: build
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Config Environment Variables
      run: |
        dotnet nuget add source https://nuget.pkg.github.com/${{ secrets.NUGET_USER }}/index.json --store-password-in-clear-text --name=github --username=${{ secrets.NUGET_USER }} --password=${{ secrets.GPR_TOKEN }}
        ./build-scripts/setenv.ps1
    - name: Download artifacts from build step
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.PKGNAME }}
    - name: Run Tests
      run: |
        ./build-scripts/test.ps1 "Jlw.Data.LocalizedContent.Tests" "Release"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Config Environment Variables
      run: |
        dotnet nuget add source https://nuget.pkg.github.com/${{ secrets.NUGET_USER }}/index.json --store-password-in-clear-text --name=github --username=${{ secrets.NUGET_USER }} --password=${{ secrets.GPR_TOKEN }}
        /bin/bash ./build-scripts/setenv.sh
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.PKGNAME }}
    - name: Publish RCL to github (using curl)
      run: |
        /bin/bash ./build-scripts/deploy.sh -u ${{ secrets.NUGET_USER }} -t ${{ secrets.GITHUB_TOKEN }} -p "Jlw.Web.Rcl.LocalizedContent"
    - name: Create RCL Release
      id: create_rcl_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.PKGVERSION }} 
        release_name: Release ${{ env.PKGNAME }}
        draft: true
        prerelease: true
    - name: Upload RCL Release Asset
      id: upload-rcl-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_rcl_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: "./${{ env.PKGNAME }}.${{ env.PKGVERSION }}.zip"
        asset_name: "${{ env.PKGNAME }}.${{ env.PKGVERSION }}.zip"
        asset_content_type: application/zip

    - name: Publish Data Repo to github (using curl)
      run: |
        /bin/bash ./build-scripts/deploy.sh -u ${{ secrets.NUGET_USER }} -t ${{ secrets.GITHUB_TOKEN }} -p "Jlw.Data.LocalizedContent"
    - name: Create DataRepo Release
      id: create_datarepo_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.PKGVERSION }} 
        release_name: Release ${{ env.PKGNAME }}
        draft: true
        prerelease: true
    - name: Upload Release Asset
      id: upload-datarepo-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_datarepo_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: "./${{ env.PKGNAME }}.${{ env.PKGVERSION }}.zip"
        asset_name: "${{ env.PKGNAME }}.${{ env.PKGVERSION }}.zip"
        asset_content_type: application/zip

  cleanup:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Config Environment Variables
      run: |
        /bin/bash ./build-scripts/setenv.sh
    - name: Delete Artifacts
      uses: geekyeggo/delete-artifact@v1
      with:
        name: ${{ env.PKGNAME }}
        failOnError: false



